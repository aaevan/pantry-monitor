STEPS:
broad overarching design thoughts:

Major moving pieces:

Bill of materials, thoughts on material choices:
    a raspberry pi 
        a starter kit is really helpful. they put all the relevant stuff in one box so you don't have to go hunting down each particular piece.
        I had a bad experience with the canakit default GPIO to breadboard adapter. Just try to talk to a few pins at once using the female to female jumper wires.
    a 10 pack of lighted arcade buttons
        each requires a small modification to be used with the pi. The leds come pre-wired with a resistor relevant to power at 12v, we want something much lower
    a board from oshpark or the relevant components in breadboard or protoboard format
        I thought I could just drive the switch LEDs from the GPIO pins. I was wrong. Strange hardware problems start happening if you're drawing too much current.
        just save yourself the trouble and drive your LEDs with a transistor and draw off of the 5v rail.
    a bunch of jumper wires, male-to-male and female-to-female.
    heatshrink tubing for every soldered connection (because we like not shorting out our everything)
        heatshrink makes everything better.
    a decent soldering/heatshrink setup
        I use:
            a temperature controlled hakko iron (worth every penny)
            a good roll of solder (don't huff solder fumes, kids)
            a cheapo heatshrink kit off of ebay (LINK), I wish I had 2mm and smaller though for some connections.
            a decent hot air gun (really, as long as it doesn't catch on fire, go for it)

burn raspbian to an SD card (plenty of ways to do this, I used a torrented image and dd.)
    download image of raspbian via torrent (https://www.raspberrypi.org/downloads/raspbian/)    
    write image using dd to correct device (find using ls /dev | grep sd)   
    do NOT write to sda. sda is where the os lives. dd is dangerous.

get the pi working headlessly (because sometimes you don't have an HDMI-ready device:
    once we've burned the raspbian image to the SD card, take a look at it on another computer.
        navigate to the boot directory and initialize the file: 
            <code> cd /Volumes/boot; touch ssh</code>
    this allows the user to login over ssh. otherwise any attempts are blocked

Things are a whole lot easier if we connect a screen and a keyboard.
Debugging and editing on the pi will be easier, there will be fewer slowdowns and you'll get immediate feedback when things aren't working.
A few times, I've made the mistake of touching the internals of the pi while it's running and it just shuts off. It's a robust little machine but it's not immortal.
We can avoid then having to manually input your wifi network's ssid and password into a file.
    Add WPA supplicant config file to boot directory to automatically login to your local wifi (given SSID and password)    
        follow the steps here: https://www.raspberrypi.org/forums/viewtopic.php?t=191252
        
set up pi with a comfortable environment
    make sure we change the default password to give ourselves some semblance of security:
        <code>passwd</code>
    install relevant libraries: sudo apt-get install python-dev python3-rpi.gpio    also do pip3 install notify-run
    and of course, install your favorite editor and get yourself some version control:  
    sudo apt-get install vim git    
    change your default editor to your favorite one:    
    sudo update-alternatives --config editor    
    pull down a repository to edit locally  I find that the pi is sometimes sluggish to do lots of edits on quickly.
    I'm not going to go into setting up a repository here, 
    something like https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/ should do the trick
    change your name and email in git so that you can commit new changes to your repository:    
    git config --global user.name "<your name>" 
    git config --global user.email "<your email>"   initialize your repository somewhere else, on say, a fully fledged computer
    
acquire and setup a known usb scale (thoughts on getting and interpreting raw byte values)
    put batteries into and plug in over USB your scale (specific model required)    
    The scale apparently also works without the batteries, but I think it's nice not to stress out the Pi too much and bring your own power.
    usb.core.USBError: [Errno 13] Access denied (insufficient permissions)  
    use lsusb to see your connected devices: lsusb | grep Dymo (capitals matter!)   
    To find the name of a device, I will sometimes find the diff between two temporary files:
        <code>
        ls /dev > /tmp/1
        remove the device
        ls /dev > /tmp/2; diff /tmp/1 /tmp/2. 
        </code>
    the same can be used for lsusb or anything else that changes when you plug in or connect a device. 
    We can see the changing state of the scale over USB by looking at the raw values:   
        <code> cat /dev/hidraw0 | xxd -c 6</code> (displays the raw bytes output)
    now that we know how long the message it sends over and over is, we can start doing interesting things with the output
    I've gone through some contortions to get the byte values into a usable format.
    <screenshot of read_scale()>
    by default we (as a normal user) can't just go reading raw values from arbitrary hardware.
    to make it so we don't have to run everything under sudo or as root, do the following, then restart the pi:
        make a new file (the extra number in the name is important):
            sudo vim/etc/udev/rules.d/99-hidraw-permissions.rules
        with the contents:
            "KERNEL==""hidraw*"", SUBSYSTEM==""hidraw"", MODE=""0664"", GROUP=""plugdev""

physical construction of interface (switches, LEDs, wiring, heatshrink)
    For the interface, I bought a 10 pack of light-up arcade switches.
    The come in a ridiculous, messy format. Don't be alarmed:
    <picture of switches>
    The switches go together in a fairly straight forward way.
    We need to swap out the resistors on each leg of the leds in the little plastic casings with new ones
    I used a heavy piece of metal and some packing tape to hold the ends close together for ease of soldering.
    <picture of LED soldering jig>
    another way would be to swap in LEDs without included resistors

interact with GPIO pins, both inputs and outputs.
    from within a python prompt (use python 3 (python3 from the terminal), python2 will soon no longer be maintained) 
    import RPi.GPIO as gpio (easier to type when lowercase?)  
    I initially played around with the gpio pins and simple layouts 
    (just an LED, just a switch, two LEDs, an LED with a switch, two switches, two LEDs and two switches)
    I recommend trying to get the simplest moving pieces working independently and then slowly start gluing them together into larger and larger pieces
    if you try to tackle too much at once, you won't have a clear indication of what is going wrong.
    You may find it's easier to do some deal of the system-agnostic trial and error (the stuff that doesn't involve the GPIO pins) locally on your laptop and then move thing over when it works nicely.


"   
pip3 install notify-run use notify.run for push notifications
To get notifications working, you will have to manually step through the registration process (as described at the bottom of the page here: https://pypi.org/project/notify-run/ )  
If you are already subscribed to one notification source, you may have to clear the existing settings by going into chrome settings-->Site settings-->Notifications and clearing or resetting existing values.  scroll down to the blue "subscribe on this device button and allow notifcations for this site.
Do a few test notifications, just to make sure it's working. I had my phone on silent and no vibration and thought it wasn't working. don't be me.  
    
make sure the python path is correct in the top line of gpio_control.py 
cd ~/; git clone https://github.com/aaevan/pantry-monitor   
to the last line of your bashrc (sudo <editor> /home/pi/.bashrc), add the following:    
sudo /home/pi/pantry-monitor/gpio_control.py    
    
open up your most easily useable editor by running crontab -e (I use vim, you can use nano) 
and enter the following:    
@reboot echo 'rebooted at `date`' >> /home/pi/log.txt   `
@reboot /home/pi/pantry-monitor/gpio_control.py &   Caution that if you have a lot of print statements and debug messages
save and quit and reboot the pi. I've added a logging command so I can see and verify that things from my crontab are running.  when you go to log into your pi, your console will be spammed with a whole host of message
    I like to stop this when it happens by running kill -9 `pgrep <process name>` 
    When you include a command in backticks, it's evaluated, then the outer command is run.
    This is useful for stuff like date and fetching a process id without running a separate command.
Idea 1: A pantry tracker: multiple electronic scales report the weight of tared-out Mason jars or other containers whenever they are removed from their spots. That, or a single scale that reports on the last item pressed, say, flour. Remove the flour from the cupboard, use some, press the flour button, place the item in the scale, wait for a beep/blink, then return it to its place in the shelf. Add a layer of notifications or something to remind you to get more of something. 
That might be a lot, but the hardware required is fairly minimal given an easily interfaced electronic scale.   
    
NOTES:  
all header pin extenders are not created equal. Mine shorts out when I plug it in.  
pw updated to: pantry_tracker_pw    

